provider "aws" {
  region = "us-east-1"
}

locals {
  ami = "ami-0e2c8caa4b6378d8c"
  name   = "swarms"
  region = "us-east-1"
  ec2_subnet_id = "subnet-057c90cfe7b2e5646"
  vpc_id = "vpc-04f28c9347af48b55"
  tags = {
    project="swarms"
  }
}

module "security_group_instance" {
  source  = "terraform-aws-modules/security-group/aws"
  version = "~> 5.0"
  name        = "${local.name}-ec2"
  description = "Security Group for EC2 Instance"
  vpc_id = local.vpc_id
  ingress_with_cidr_blocks = [
     {
       from_port   = 443
       to_port     = 443
       protocol    = "tcp"
       cidr_blocks = "0.0.0.0/0"
     },
    {
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      cidr_blocks = "0.0.0.0/0"
    }
  ]

  egress_rules = ["all-all"]
  tags = local.tags
}

module "ec2" {
  source  = "terraform-aws-modules/ec2-instance/aws"
  associate_public_ip_address = true # for now
  name =  local.name
  ami   = local.ami # data.aws_ami.ubuntu.id
  instance_type = "t3.large"
  create_iam_instance_profile = true
  iam_role_description        = "IAM role for EC2 instance"
  iam_role_policies = {
    AmazonSSMManagedInstanceCore = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  }
  vpc_security_group_ids = [module.security_group_instance.security_group_id]

  root_block_device = [
    {
      encrypted   = true
      volume_size = 30
      volume_type           = "gp3"
    }
  ]

  user_data = <<-EOF
#!/bin/bash
export HOME=/root
apt update
apt-get install -y ec2-instance-connect git virtualenv

if [ ! -d "/opt/swarms/" ];
  then
  git clone https://github.com/jmikedupont2/swarms "/opt/swarms/"
fi    
cd "/opt/swarms/" || exit 1 # "we need swarms"
export BRANCH=feature/ec2
git checkout --force  $BRANCH
bash -x /opt/swarms/api/install.sh
              EOF
  tags = local.tags  
  create_spot_instance = true
  subnet_id     = local.ec2_subnet_id
}

TASK FOR GPT:
#1/ create an autoscaling group
#2/ create a launch template
#3/ create a lambda function to trigger the launching of new instances



To create an Auto Scaling group, a launch template, and a Lambda function to trigger the launching of new instances, you can add the following configurations to your Terraform script:

### 1. Create a Launch Template

```hcl
resource "aws_launch_template" "ec2_launch_template" {
  name_prefix           = "${local.name}-launch-template-"
  image_id              = local.ami
  instance_type        = "t3.large"
  associate_public_ip_address = true
  
  iam_instance_profile {
    name = aws_iam_instance_profile.ec2_instance_profile.name
  }

  key_name = "your-key-pair" # Replace with your key pair name

  lifecycle {
    create_before_destroy = true
  }

  block_device_mappings {
    device_name = "/dev/xvda"
    ebs {
      volume_size = 30
      volume_type = "gp3"
      encrypted   = true
    }
  }

  user_data = <<-EOF
  #!/bin/bash
  export HOME=/root
  apt update
  apt-get install -y ec2-instance-connect git virtualenv

  if [ ! -d "/opt/swarms/" ]; then
    git clone https://github.com/jmikedupont2/swarms "/opt/swarms/"
  fi
  cd "/opt/swarms/" || exit 1
  export BRANCH=feature/ec2
  git checkout --force $BRANCH
  bash -x /opt/swarms/api/install.sh
  EOF

  tags = local.tags  
}
```

### 2. Create an Auto Scaling Group

```hcl
resource "aws_autoscaling_group" "ec2_autoscaling_group" {
  desired_capacity     = 1
  max_size             = 5
  min_size             = 1

  launch_template {
    id      = aws_launch_template.ec2_launch_template.id
    version = "$Latest"
  }

  vpc_zone_identifier = [local.ec2_subnet_id]

  tags = [
    {
      key                 = "Name"
      value               = local.name
      propagate_at_launch = true
    },
    {
      key                 = "Project"
      value               = local.tags.project
      propagate_at_launch = true
    }
  ]
}
```

### 3. Create a Lambda Function to Trigger New Instances

```hcl
resource "aws_iam_role" "lambda_role" {
  name = "${local.name}-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_policy" "lambda_scaling_policy" {
  name        = "${local.name}-scaling-policy"
  description = "Policy to allow Lambda to manage Auto Scaling"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = [
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:SetDesiredCapacity"
      ]
      Resource = "*"
      Effect = "Allow"
    }]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_policy_attach" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_scaling_policy.arn
}

resource "aws_lambda_function" "scale_lambda" {
  function_name = "${local.name}-scale-lambda"
  role          = aws_iam_role.lambda_role.arn

  runtime        = "python3.8"
  handler        = "scale_lambda.handler"

  source_code_hash = filebase64sha256("lambda/scale_lambda.zip")
  
  # Environment variables for the Lambda function
  environment = {
    AUTO_SCALING_GROUP_NAME = aws_autoscaling_group.ec2_autoscaling_group.name
  }
}
```

### 4. Lambda Function Code (Python)

You'll need to create a file named `scale_lambda.py` in the `lambda/` directory with content like the following:

```python
import boto3
import os

def handler(event, context):
    asg_name = os.environ['AUTO_SCALING_GROUP_NAME']
    client = boto3.client('autoscaling')

    response = client.describe_auto_scaling_groups(AutoScalingGroupNames=[asg_name])
    desired_capacity = response['AutoScalingGroups'][0]['DesiredCapacity']
    
    # Example scaling logic
    client.set_desired_capacity(
        AutoScalingGroupName=asg_name,
        DesiredCapacity=desired_capacity + 1,  # Increment desired instances
        HonorCooldown=True
    )
```

### Note
- Replace `"your-key-pair"` in the launch template with your actual key pair name.
- Ensure you have the right IAM permissions for your Lambda function.
- You may need to handle packaging and deploying your Lambda function code (`scale_lambda.py`) as a zip file for Terraform.
- Adjust desired capacity and scaling logic as per your requirement.

This configuration sets up an Auto Scaling group with a launch template and a Lambda function that can adjust the desired number of running instances based on certain conditions (you would need to implement those conditions).